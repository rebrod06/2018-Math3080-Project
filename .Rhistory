s = 1
#generate random samples of size n
rs = matrix(rnorm(n*sims,mu,s), nrow=n, ncol=sims)
cl = makeSOCKcluster(c("localhost","localhost","localhost","localhost"))
max_stats_anova2 = parApply(cl, rs, 2, anova_tests)
lambdaCDF_anova = ecdf(max_stats_anova2)
plot(density(max_stats_anova2))
plot(lambdaCDF_anova)
lambdaQTSd = quantile(max_stats_anova2, probs = c(0.90, 0.95, 0.975, 0.99, 0.999), na.rm = FALSE, names = FALSE, type = 1)
a_result = changepoint_search_anova(rates$Value,0)
a2_Results = as.data.frame(anova_F2(rates$Value))
anova_results = data.frame(
x = a2_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results = unstack(anova_results)
max(anova_results$FVal)
which.max(anova_results$FVal)
a_result = changepoint_search_anova(rates$Value,0)
rates = treasury10Y[((252*10)+1):length(treasury10Y),] # take 20 past years of treasury data
rates = treasury10Y[((252*20)+1):length(treasury10Y),] # take 20 past years of treasury data
sub2 = rates[4:5040,]
changepoint_search_anova(sub2$Value,0)
changepoint_search_anova(sub2$Value,4)
changepoint_search_anova(sub2$Value,0)
a2_Results = as.data.frame(anova_F2(rates$Value))
anova_results = data.frame(
x = a2_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
View(anova_results)
anova_results = unstack(anova_results)
View(anova_results)
# Plot for fun
plot(rates$Value, type="l")
changepoint_search_anova = function(rate_list, indexer){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform anova test: is mean of first n items different from mean of remaining m items?
populations = factor(c(rep(c("a","b"), c(length(rate_list[1:(indexer)]),length(rate_list[(indexer+1):length(rate_list)])))))
aov_results = unlist(summary(aov(rs~populations)))
f_stat = aov_results[7]
#get critical val
c_val = lambdaQTSd[4] # TODO
#compare test stat to critical val
if (f_stat > c_val){
return (cat("value:", rate_list[indexer], "index", indexer))
}
#otherwise, no change found
else{
#if there aren't enough values left, stop searching
if(length(rate_list[(indexer+1):length(rate_list)]) < 2){
return ("Done comparing: no changepoint detected")
}
#otherwise, keep searching
else{
#cat("indexer:", indexer) #print debugging
#move down the list
indexer = indexer + 1
return (changepoint_search(rate_list, indexer))
}
}
}
}
anova_F2 = function(rs){
index_end = length(rs)
#vectors to hold test statistics
anovatest_stats = c()
#traverse through list and perform anova tests
for (i in 2:(index_end-2)){
#create factors for anova test
populations = factor(c(rep(c("a","b"), c(i,index_end-i))))
#perform anova test
anova_results = unlist(summary(aov(rs~populations)))
f_stat = anova_results[7]
#get critical val
c_val = lambdaQTSd[4] # TODO
#compare test stat to critical val
if (f_stat > c_val){
anovatest_stats = c(anovatest_stats, "Changepoint", anova_results[7], anova_results[9])
}
#otherwise, no change found
else{
anovatest_stats = c(anovatest_stats, "No Changepoint", anova_results[7], anova_results[9])
}
}
#return max test statistic
return(anovatest_stats)
}
a_result = changepoint_search_anova(rates$Value,0)
sub1 = rates[1:2,]
sub1 = rates[1:2,]
sub2 = rates[3:5040,]
changepoint_search_anova(sub2$Value,0)
View(sub2)
a2_Results = as.data.frame(anova_F2(rates$Value))
View(a2_Results)
anova_results = data.frame(
x = a2_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results = unstack(anova_results)
par(mfrow=c(2,2))
plot(rates$Value, type="l")
plot(anova_results$FVal, type="l")
plot(anova_results$PVal, type = "l")
aov_chart = rates[-3,]
aov_chart = rates[1:(n-3),]
aov_chart$Date = as.Date(aov_chart$Date)
aov_chart$Value = as.numeric(aov_chart$Value)
aov_chart$FVal = as.numeric(anova_results$FVal)
aov_chart$PVal = as.numeric(anova_results$PVal)
aov_chart$FVal = round(aov_chart$FVal, digits = 3)
aov_chart$PVal = round(aov_chart$PVal, digits = 6)
library(ggplot2)
library(reshape2)
aov_chart_prep = melt(aov_chart, id = "Date", measure = c("Value", "FVal", "PVal"))
ggplot(aov_chart_prep, aes(Date, value, colour = variable)) + geom_line()
par(mfrow=c(2,2))
plot(rates$Value, type="l")
plot(anova_results$FVal, type="l")
plot(anova_results$PVal, type = "l")
sub2 = rates[33:5040,]
sub1 = rates[1:32,]
a2_Results_sub1 = as.data.frame(anova_F2(sub1$Value))
anova_results_sub1 = data.frame(
x = a2_Results_sub1,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub1 = unstack(anova_results_sub1)
anova_results_sub1 = unstack(anova_results_sub1)
anova_results_sub1 = data.frame(
x = a2_Results_sub1,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub1 = unstack(anova_results_sub1)
View(anova_results_sub1)
a2_Results_sub2 = as.data.frame(anova_F2(sub2$Value))
anova_results_sub2 = data.frame(
x = a2_Results_sub2,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub2 = unstack(anova_results_sub2)
View(a2_Results_sub2)
anova_results_sub2 = unstack(anova_results_sub2)
anova_results_sub2 = data.frame(
x = a2_Results_sub2,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub2 = unstack(anova_results_sub2)
View(anova_results_sub2)
plot(rates$Value, type="l")
plot(anova_results_sub2$FVal, type="l")
plot(anova_results_sub2$PVal, type = "l")
par(mfrow=c(2,2))
plot(sub2$Value, type="l")
plot(anova_results_sub2$FVal, type="l")
plot(anova_results_sub2$PVal, type = "l")
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
#treasury10Y = na.omit(treasury10Y)
rates = treasury10Y[((252*20)+1):length(treasury10Y),] # take 20 past years of treasury data
# Plot time series for fun visualization
plot(rates$Value, type="l")
# Plot time series for fun visualization
plot(rates$Value ~ rates$Date, type="l")
# Plot time series for fun visualization
plot(rates$Value, type="l")
# Plot time series for fun visualization
plot(rates$Value, type="l", main = "U.S. Treasury 10 Year Yield", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value, type="l", main = "U.S. Treasury 10 Year - Yield(%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value, type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value, as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
View(rates)
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
View(treasury10Y)
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL
rates = treasury10Y[((252*20)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL
rates = treasury10Y[(length(treasury10Y)-((252*20)+1)):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
# Parameters for sampling from standard normal distribution
n = length(rates$Value) # The sample size
sims = 1000 # The number of simulations to replicate, also the length of discrete values in our Lambda Distribution
mu = 0 # The true expected mean value of our normal distribution
s = 1 # The true variance of our normal distribution
lambdaCDF_anova = ecdf(max_stats_anova2)
plot(density(max_stats_anova2))
plot(lambdaCDF_anova)
plot(lambdaCDF_anova, main = "Lambda CDF", xlab = "Critical Value" , ylab = "Accumulated Area")
plot(density(max_stats_anova2))
plot(density(max_stats_anova2), main = "Lambda PDF", xlab = "Critical Value" , ylab = "Density of Observations")
lambdaResample = function(n,x) {
l = replicate(n,(sample(x, size=1, replace=FALSE)))
return(l)
}
lambdaResample = function(n,x) {
l = replicate(x,(sample(n, size=1, replace=FALSE)))
return(l)
}
# Generate random samples of size n
rs = matrix(lambdaResample(rates$Value,sims), nrow=n, ncol=sims)
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
anova_F = function(rs){
index_end = length(rs)
#vectors to hold test statistics
anovatest_stats = c()
#traverse through list and perform anova tests
for (i in 2:(index_end-2)){
#create factors for anova test
populations = factor(c(rep(c("a","b"), c(i,index_end-i))))
#perform anova test
anova_results = unlist(summary(aov(rs~populations)))
f_stat = anova_results[7]
#get critical val
c_val = lambdaQTSd[4] # TODO
#compare test stat to critical val
if (f_stat > c_val){
anovatest_stats = c(anovatest_stats, "Changepoint", anova_results[7], anova_results[9])
}
#otherwise, no change found
else{
anovatest_stats = c(anovatest_stats, "No Changepoint", anova_results[7], anova_results[9])
}
}
#return max test statistic
return(anovatest_stats)
}
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
View(anova_results)
View(rates)
plot(rates$Value, type="l")
plot(anova_results$FVal, type="l")
plot(anova_results$PVal, type = "l")
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" , ylab = "Yield (%)")
plot(anova_results$FVal, type="l", main = "F-Values Across Cascading Test", xlab = "Index", ylab = "F-Values")
plot(anova_results$PVal, type = "l", main = "P-Values Across Cascading Test", xlab = "Index", ylab = "P-Values")
rates = treasury10Y[(length(treasury10Y))-((252*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((245*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
View(treasury10Y)
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*30)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*30)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
length(treasury10Y)
nrow(treasury10Y)
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((365*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
(nrow(treasury10Y))-((252*30)+1)
(nrow(treasury10Y))-((252*30)+1)-nrow(treasury10Y)
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
(nrow(treasury10Y))-((252*30)+1)
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
length(treasury10Y)
(nrow(treasury10Y))
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
treasury10Y = rownames(treasury10Y) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rates = treasury10Y[nrow(treasury10Y):(nrow(treasury10Y))-((252*30)+1),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):11620,] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
treasury10Y$V1 = 1:nrow(treasury10Y) # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
treasury10Y = 1:nrow(treasury10Y) # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
treasury10Y = (rownames(treasury10Y) = NULL) # re-index the new subset
rownames(treasury10Y) = seq(length=nrow(treasury10Y)) # re-index the new subset
rownames(treasury10Y) = seq(length = nrow(treasury10Y)) # re-index the new subset
rownames(treasury10Y) = NULL # re-index the new subset
rownames(treasury10Y) = 1:nrow(treasury10Y) # re-index the new subset
rownames(treasury10Y) = seq(length = 1:nrow(treasury10Y)) # re-index the new subset
rownames(treasury10Y) = seq(length = nrow(treasury10Y)) # re-index the new subset
row.names(treasury10Y) = NULL  # re-index the new subset
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),]
View(treasury10Y)
View(rates)
(nrow(treasury10Y))-((252*30)+1)
nrow(treasury10Y)
#rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),]
rates = treasury10Y[4059:11620,]# take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
(nrow(treasury10Y))-((252*30)+1)
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),]
View(rates)
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),]
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
rates = treasury10Y[((nrow(treasury10Y))-((252*10)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
rates = treasury10Y[((nrow(treasury10Y))-((252*40)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" , ylab = "Yield (%)")
plot(anova_results$FVal, type="l", main = "F-Values Across Cascading Test", xlab = "Index", ylab = "F-Values")
plot(anova_results$PVal, type = "l", main = "P-Values Across Cascading Test", xlab = "Index", ylab = "P-Values")
## Stream data into dataframe
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
length(rates$Value)
