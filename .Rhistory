lambdaDistD = lambdaResample2(500,treasury10Y$SVENPY10)
treasuryRates = read.csv("./FED-SVENPY.csv")
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
treasury10Y = treasury10Y[complete.cases(treasury10Y), ]
lambdaResample2 = function(sims,x) {
l = replicate(sims,(max(replicate(sims,(mean(sample(x, size=252, replace=FALSE)))))))
return(l)
}
lambdaDistD = lambdaResample2(500,treasury10Y$SVENPY10)
lambdaDistD = lambdaResample2(1000,treasury10Y$SVENPY10)
lambdaResample2 = function(sims,x) {
l = replicate(sims,(replicate(sims,(max(sample(x, size=252, replace=FALSE))))))
return(l)
}
lambdaDistD = lambdaResample2(1000,treasury10Y$SVENPY10)
lambdaQTS3 = quantile(lambdaDistD, probs = c(0.90, 0.95, 0.975, 0.99, 0.999), na.rm = FALSE, names = FALSE, type = 1)
changepoint_search = function(rate_list, indexer){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform t test: is mean of first n items different from mean of remaining m items?
ttest_results = t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
#get critical val
c_val = lambdaQTS3[3] # TODO
#compare test stat to critical val
if (abs(t_stat) > c_val){
return (cat("value:", rate_list[indexer], "index", indexer))
}
#otherwise, no change found
else{
#if there aren't enough values left, stop searching
if(length(rate_list[(indexer+1):length(rate_list)]) < 2){
return ("Done comparing: no changepoint detected")
}
#otherwise, keep searching
else{
#cat("indexer:", indexer) #print debugging
#move down the list
indexer = indexer + 1
return (changepoint_search(rate_list, indexer))
}
}
}
}
plot(density(lambdaDistD))
plot(lambdaCDFD)
lambdaCDFD = ecdf(lambdaDistD)
plot(density(lambdaDistD))
plot(lambdaCDFD)
changepoint_search(treasury10Y$SVENPY10[c(0:length(treasury10Y$SVENPY10))],0)
lambdaDistD = lambdaResample2(2000,treasury10Y$SVENPY10)
lambdaCDFD = ecdf(lambdaDistD)
lambdaQTS3 = quantile(lambdaDistD, probs = c(0.90, 0.95, 0.975, 0.99, 0.999), na.rm = FALSE, names = FALSE, type = 1)
plot(density(lambdaDistD))
plot(lambdaCDFD)
changepoint_search(treasury10Y$SVENPY10[c(0:length(treasury10Y$SVENPY10))],0)
## Stream data into dataframe
treasuryRates = read.csv("./FED-SVENPY.csv")
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
treasury10Y = treasury10Y[complete.cases(treasury10Y), ]
# Plot for fun
plot(treasury10Y)
set.seed(1000) # set seed to ensure replicable results
n = 10000 # The number of standard normal datasets to be tested
sims = 50000 # The number of simulations to replicate, also the length of discrete values in our Lambda Distribution
mu = 0 # The true expected mean value of our normal distribution
s = 1 # The true variance of our normal distribution
## A Monte Carlo Simulation Function to generate our Lambda Distribution ##
lambdaSimA = function(sims,n,mu,s) {
l = abs(c(replicate(sims,(max(rnorm(n,mu,s)))),replicate(sims,(min(rnorm(n,mu,s))))))
return(l)
}
## A Monte Carlo Simulation Function to generate our Lambda Distribution ##
lambdaSimB = function(sims,n,mu,s) {
l = replicate(sims,(max(abs(rnorm(n,mu,s)))))
return(l)
}
## Run the function to generate the Lambda Distribution ##
lambdaDistA = lambdaSimA(sims,n,mu,s)
lambdaDistB = lambdaSimB(sims,n,mu,s)
## Generate CDF of our Lambda Distribution later use to generate p-values at various critical values
lambdaCDF = ecdf(lambdaDist)
## Generate CDF of our Lambda Distribution later use to generate p-values at various critical values
lambdaCDF = ecdf(lambdaDistA)
changepoint_dist_search = function(rate_list, indexer){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform t test: is mean of first n items different from mean of remaining m items?
ttest_results = t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
}
indexer = indexer +1
}
changepoint_dist_search(treasury10Y$SVENPY10,0)
changepoint_dist_search = function(rate_list, indexer){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform t test: is mean of first n items different from mean of remaining m items?
ttest_results = t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
indexer = indexer + 1
return(t_stat)
}
}
changepoint_dist_search(treasury10Y$SVENPY10,0)
replicate(100,changepoint_dist_search(treasury10Y$SVENPY10,0))
changepoint_dist_search = function(rate_list, indexer){
for(indexer in indexer:length(rate_list)){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform t test: is mean of first n items different from mean of remaining m items?
ttest_results = t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
indexer = indexer + 1
return(t_stat)
}
}
}
changepoint_dist_search(treasury10Y$SVENPY10,0)
changepoint_dist_search = function(rate_list, indexer){
for(indexer in indexer:length(rate_list)){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform t test: is mean of first n items different from mean of remaining m items?
ttest_results = t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
indexer = indexer + 1
return(indexer,t_stat)
}
}
}
changepoint_dist_search(treasury10Y$SVENPY10,0)
changepoint_dist_search = function(rate_list, indexer){
for(indexer in indexer:length(rate_list)){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform t test: is mean of first n items different from mean of remaining m items?
ttest_results = t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
indexer = indexer + 1
return(t_stat)
return(indexer)
}
}
}
changepoint_dist_search(treasury10Y$SVENPY10,0)
changepoint_dist_search = function(rate_list, indexer){
for(row in 1:nrow(rate_list)){
#initialize indexer
if(indexer == 0) {
indexer = indexer + 2
}
#if list isn't long enough, can't perform test
if (length(rate_list) < 4){
return ("Can't perform analysis")
}
#otherwise, perform the test
else{
#perform t test: is mean of first n items different from mean of remaining m items?
ttest_results = t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
indexer = indexer + 1
return(t_stat)
}
}
}
changepoint_dist_search(treasury10Y$SVENPY10,0)
sapply(2:nrow(treasury10Y$SVENPY10-2), changepoint_search(treasury10Y$SVENPY10,0))
sapply(2:nrow(treasury10Y$SVENPY10-2), function(x,y) changepoint_search(treasury10Y$SVENPY10,0))
sapply(2:nrow(treasury10Y$SVENPY10), function(x,y) changepoint_search(treasury10Y$SVENPY10,0))
sapply(1:nrow(treasury10Y$SVENPY10), function(x,y) changepoint_search(treasury10Y$SVENPY10,0))
sapply(treasury10Y$SVENPY10:treasury10Y$SVENPY10, function(x,y) changepoint_search(treasury10Y$SVENPY10,0))
lapply(1:nrow(treasury10Y$SVENPY10), function(i) t.test(treasury10Y
[i,SVENPY10],treasury10Y[i,SVENPY10]))
lapply(1:nrow(treasury10Y), function(i) t.test(treasury10Y
[i,SVENPY10],treasury10Y[i,SVENPY10]))
lapply(1:nrow(treasury10Y), function(i) t.test(treasury10Y
[i,treasury10Y$SVENPY10],treasury10Y[i,treasury10Y$SVENPY10]))
lapply(1:nrow(treasury10Y), function(i) t.test(treasury10Y[i,treasury10Y$SVENPY10],treasury10Y[i,treasury10Y$SVENPY10]))
lapply(1:nrow(treasury10Y), function(i) t.test(treasury10Y[i,SVENPY10],treasury10Y[i,SVENPY10]))
lapply(1:nrow(treasury10Y), function(rate_list,indexer) t.test(c(rate_list[1:(indexer)]), c(rate_list[(indexer+1):length(rate_list)]), alternative="two.sided", var.equal=FALSE))
changepoint_search(treasury10Y$SVENPY10[c(0:length(treasury10Y$SVENPY10))],0)
lapply(1:252, changepoint_search(rnorm(n,mu,s),0))
lapply(1:252, changepoint_search(rnorm(n,mu,s),0))
lapply(1:10, changepoint_search(rnorm(n,mu,s),0))
lapply(1:10, changepoint_search(rnorm(100,0,1),0))
lapply(1:100, changepoint_search(rnorm(100,0,1),0))
lapply(1:100, changepoint_search(rnorm(104,0,1),0))
lapply(1:10, changepoint_search(rnorm(100,0,1),0))
sapply(1:10, changepoint_search(rnorm(100,0,1),0))
apply(1:10, changepoint_search(rnorm(100,0,1),0))
mapply(1:10, changepoint_search(rnorm(100,0,1),0))
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
t = t.test(x[1,i],x[i+1,length(x)],alternative="two.sided", var.equal=FALSE)
return(t)
}
}
change2(rnorm(100,0,1))
x = rnorm(100,0,1)
change2(rnorm(x))
x = as.data.frame(rnorm(100,0,1))
change2(rnorm(x))
change2(x)
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
t = t.test(x[c(1,i),],x[c(i+1,length(x))],alternative="two.sided", var.equal=FALSE)
return(t)
}
}
change2(x)
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
t = t.test(x[c(1,i),],x[c(i+1,i)],alternative="two.sided", var.equal=FALSE)
return(t)
}
}
change2(x)
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
t = t.test(x[c(1,i),],x[c(i+1,i+(length(x)))],alternative="two.sided", var.equal=FALSE)
return(t)
}
}
change2(x)
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
t = t.test(x[c(1,i),],x[c(i+1,i+length(x)),],alternative="two.sided", var.equal=FALSE)
return(t)
}
}
change2(x)
change2(treasury10Y$SVENPY10)
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
t = t.test(x[c(1,i+1),],x[c(i+2,i+length(x)),],alternative="two.sided", var.equal=FALSE)
return(t)
}
}
change2(x)
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
ttest_results = t.test(x[c(1,i+1),], x[c(i+2,i+length(x)),], alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
return(t)
}
}
change2(x)
change2 = function(x) {
for (i in 1:nrow(x)) {
row = x[i,]
ttest_results = t.test(x[c(1,i+1),], x[c(i+2,i+length(x)),], alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
return(t_stat)
}
}
change2(x)
lapply(100,function(x) change2(x))
change2 = function(x) {
for (i in 1:nrow(x)) {
ttest_results = t.test(x[c(1,i+1),], x[c(i+2,i+length(x)),], alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
return(t_stat)
}
}
change2(x)
lapply(100,function(x) change2(x))
x = as.data.frame(rnorm(100,0,1))
lapply(100,function(x) change2(x))
lapply(100, change2(x))
lapply(100, change2())
lapply(x, change2(x))
replicate(100, change2(x))
change2 = function(x) {
for (i in 1:nrow(x)) {
ttest_results = t.test(x[c(1,i+1),], x[c(i+2,i+length(x)),], alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
return(t_stat)
return(i+1)
}
}
change2(x)
change2 = function(x) {
for (i in nrow(x)) {
ttest_results = t.test(x[c(1,i+1),], x[c(i+2,i+length(x)),], alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
return(t_stat)
}
}
change2(x)
change2 = function(x) {
for (i in seq_len(nrow(x))) {
ttest_results = t.test(x[c(1,i+1),], x[c(i+2,i+length(x)),], alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
return(t_stat)
}
}
change2(x)
change2 = function(x) {
for (i in seq_len(nrow(x))){
for (i in seq_len(nrow(x))) {
ttest_results = t.test(x[c(1,i+1),], x[c(i+2,i+length(x)),], alternative="two.sided", var.equal=FALSE)
t_stat = ttest_results$statistic
return(t_stat)
}
}
}
change2(x)
