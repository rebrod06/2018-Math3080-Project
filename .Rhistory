plot(anova_results$FVal, type="l")
plot(anova_results$PVal, type = "l")
sub2 = rates[33:5040,]
sub1 = rates[1:32,]
a2_Results_sub1 = as.data.frame(anova_F2(sub1$Value))
anova_results_sub1 = data.frame(
x = a2_Results_sub1,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub1 = unstack(anova_results_sub1)
anova_results_sub1 = unstack(anova_results_sub1)
anova_results_sub1 = data.frame(
x = a2_Results_sub1,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub1 = unstack(anova_results_sub1)
View(anova_results_sub1)
a2_Results_sub2 = as.data.frame(anova_F2(sub2$Value))
anova_results_sub2 = data.frame(
x = a2_Results_sub2,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub2 = unstack(anova_results_sub2)
View(a2_Results_sub2)
anova_results_sub2 = unstack(anova_results_sub2)
anova_results_sub2 = data.frame(
x = a2_Results_sub2,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
anova_results_sub2 = unstack(anova_results_sub2)
View(anova_results_sub2)
plot(rates$Value, type="l")
plot(anova_results_sub2$FVal, type="l")
plot(anova_results_sub2$PVal, type = "l")
par(mfrow=c(2,2))
plot(sub2$Value, type="l")
plot(anova_results_sub2$FVal, type="l")
plot(anova_results_sub2$PVal, type = "l")
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
#treasury10Y = na.omit(treasury10Y)
rates = treasury10Y[((252*20)+1):length(treasury10Y),] # take 20 past years of treasury data
# Plot time series for fun visualization
plot(rates$Value, type="l")
# Plot time series for fun visualization
plot(rates$Value ~ rates$Date, type="l")
# Plot time series for fun visualization
plot(rates$Value, type="l")
# Plot time series for fun visualization
plot(rates$Value, type="l", main = "U.S. Treasury 10 Year Yield", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value, type="l", main = "U.S. Treasury 10 Year - Yield(%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value, type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value, as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
View(rates)
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
View(treasury10Y)
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL
rates = treasury10Y[((252*20)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL
rates = treasury10Y[(length(treasury10Y)-((252*20)+1)):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Index" ,ylab = "Yield (%)")
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
# Parameters for sampling from standard normal distribution
n = length(rates$Value) # The sample size
sims = 1000 # The number of simulations to replicate, also the length of discrete values in our Lambda Distribution
mu = 0 # The true expected mean value of our normal distribution
s = 1 # The true variance of our normal distribution
lambdaCDF_anova = ecdf(max_stats_anova2)
plot(density(max_stats_anova2))
plot(lambdaCDF_anova)
plot(lambdaCDF_anova, main = "Lambda CDF", xlab = "Critical Value" , ylab = "Accumulated Area")
plot(density(max_stats_anova2))
plot(density(max_stats_anova2), main = "Lambda PDF", xlab = "Critical Value" , ylab = "Density of Observations")
lambdaResample = function(n,x) {
l = replicate(n,(sample(x, size=1, replace=FALSE)))
return(l)
}
lambdaResample = function(n,x) {
l = replicate(x,(sample(n, size=1, replace=FALSE)))
return(l)
}
# Generate random samples of size n
rs = matrix(lambdaResample(rates$Value,sims), nrow=n, ncol=sims)
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
anova_F = function(rs){
index_end = length(rs)
#vectors to hold test statistics
anovatest_stats = c()
#traverse through list and perform anova tests
for (i in 2:(index_end-2)){
#create factors for anova test
populations = factor(c(rep(c("a","b"), c(i,index_end-i))))
#perform anova test
anova_results = unlist(summary(aov(rs~populations)))
f_stat = anova_results[7]
#get critical val
c_val = lambdaQTSd[4] # TODO
#compare test stat to critical val
if (f_stat > c_val){
anovatest_stats = c(anovatest_stats, "Changepoint", anova_results[7], anova_results[9])
}
#otherwise, no change found
else{
anovatest_stats = c(anovatest_stats, "No Changepoint", anova_results[7], anova_results[9])
}
}
#return max test statistic
return(anovatest_stats)
}
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
View(anova_results)
View(rates)
plot(rates$Value, type="l")
plot(anova_results$FVal, type="l")
plot(anova_results$PVal, type = "l")
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" , ylab = "Yield (%)")
plot(anova_results$FVal, type="l", main = "F-Values Across Cascading Test", xlab = "Index", ylab = "F-Values")
plot(anova_results$PVal, type = "l", main = "P-Values Across Cascading Test", xlab = "Index", ylab = "P-Values")
rates = treasury10Y[(length(treasury10Y))-((252*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((245*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, assuming 252 trading days per year and 20 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*30)+1):length(treasury10Y),] # take ~20 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
View(treasury10Y)
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*30)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((365*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*30)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(length(treasury10Y))-((252*20)+1):length(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
length(treasury10Y)
nrow(treasury10Y)
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((365*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
(nrow(treasury10Y))-((252*30)+1)
(nrow(treasury10Y))-((252*30)+1)-nrow(treasury10Y)
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 365 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
(nrow(treasury10Y))-((252*30)+1)
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
length(treasury10Y)
(nrow(treasury10Y))
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
treasury10Y = rownames(treasury10Y) = NULL # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rates = treasury10Y[nrow(treasury10Y):(nrow(treasury10Y))-((252*30)+1),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
rownames(treasury10Y) = NULL # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):11620,] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
treasury10Y$V1 = 1:nrow(treasury10Y) # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
treasury10Y = 1:nrow(treasury10Y) # re-index the new subset
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
treasury10Y = (rownames(treasury10Y) = NULL) # re-index the new subset
rownames(treasury10Y) = seq(length=nrow(treasury10Y)) # re-index the new subset
rownames(treasury10Y) = seq(length = nrow(treasury10Y)) # re-index the new subset
rownames(treasury10Y) = NULL # re-index the new subset
rownames(treasury10Y) = 1:nrow(treasury10Y) # re-index the new subset
rownames(treasury10Y) = seq(length = 1:nrow(treasury10Y)) # re-index the new subset
rownames(treasury10Y) = seq(length = nrow(treasury10Y)) # re-index the new subset
row.names(treasury10Y) = NULL  # re-index the new subset
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),]
View(treasury10Y)
View(rates)
(nrow(treasury10Y))-((252*30)+1)
nrow(treasury10Y)
#rates = treasury10Y[(nrow(treasury10Y))-((252*30)+1):nrow(treasury10Y),]
rates = treasury10Y[4059:11620,]# take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
(nrow(treasury10Y))-((252*30)+1)
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),]
View(rates)
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),]
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
rates = treasury10Y[((nrow(treasury10Y))-((252*10)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
rates = treasury10Y[((nrow(treasury10Y))-((252*40)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
a_Results = as.data.frame(anova_F(rates$Value))
anova_results = data.frame(
x = a_Results,
result = c("Result", "FVal", "PVal")[c(1,2,3)]
)
# Unstack into a dataframe to see each respective index, F-Value and P-Value
anova_results = unstack(anova_results)
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" , ylab = "Yield (%)")
plot(anova_results$FVal, type="l", main = "F-Values Across Cascading Test", xlab = "Index", ylab = "F-Values")
plot(anova_results$PVal, type = "l", main = "P-Values Across Cascading Test", xlab = "Index", ylab = "P-Values")
## Stream data into dataframe
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
length(rates$Value)
## Stream data into dataframe
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
set.seed(1000) # Set seed to ensure replicable results
# Parameters for sampling from standard normal distribution
n = length(rates$Value) # The sample size
sims = 1000 # The number of simulations to replicate, also the length of discrete values in our Lambda Distribution
mu = 0 # The true expected mean value of our normal distribution
s = 1 # The true variance of our normal distribution
anova_tests = function(rs){
index_end = length(rs)
#vectors to hold test statistics
anovatest_stats = c()
#traverse through list and perform anova tests
for (i in 2:(index_end-2)){
#create factors for anova test
populations = factor(c(rep(c("a","b"), c(i,index_end-i))))
#perform anova test
anova_results = unlist(summary(aov(rs~populations)))
#put test statistic in list
anovatest_stats = c(anovatest_stats, anova_results[7])
}
#return max test statistic
return(max(anovatest_stats))
}
# Generate random samples of size n
rs = matrix(rnorm(n*sims,mu,s), nrow=n, ncol=sims)
# Load the library "snow"" to parallelize the computation using all available cores of the local machine
library(snow)
# Open up sockets to the 4 local processor cores
## Note: only enter "localhost" = to the number of cores on your processor
cl = makeSOCKcluster(c("localhost","localhost","localhost","localhost"))
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
set.seed(1000) # Set seed to ensure replicable results
# Parameters for sampling from standard normal distribution
n = length(rates$Value) # The sample size
sims = 1000 # The number of simulations to replicate, also the length of discrete values in our Lambda Distribution
mu = 0 # The true expected mean value of our normal distribution
s = 1 # The true variance of our normal distribution
# Generate random samples of size n
rs = matrix(rnorm(n*sims,mu,s), nrow=n, ncol=sims)
anova_tests = function(rs){
index_end = length(rs)
#vectors to hold test statistics
anovatest_stats = c()
#traverse through list and perform anova tests
for (i in 2:(index_end-2)){
#create factors for anova test
populations = factor(c(rep(c("a","b"), c(i,index_end-i))))
#perform anova test
anova_results = unlist(summary(aov(rs~populations)))
#put test statistic in list
anovatest_stats = c(anovatest_stats, anova_results[7])
}
#return max test statistic
return(max(anovatest_stats))
}
# Load the library "snow"" to parallelize the computation using all available cores of the local machine
library(snow)
# Retrieve max test statistics by applying the function to each matrix vector
## Note: expect to wait about 45 mins on a 2.7ghz quad core processor ##
max_stats_anova2 = parApply(cl, rs, 2, anova_tests)
# Open up sockets to the 4 local processor cores
## Note: only enter "localhost" = to the number of cores on your processor
cl = makeSOCKcluster(c("localhost","localhost","localhost","localhost"))
## Stream data into dataframe
treasuryRates = read.csv("./FED-SVENPY.csv") #daily rates
## Subset dataframe to only include 10 year rates
treasury10Y = subset(treasuryRates, select=c(Date,SVENPY10))
colnames(treasury10Y)[c(1,2)] = c("Date", "Value") # rename columns
treasury10Y = treasury10Y[complete.cases(treasury10Y), ] # drop NAs
treasury10Y = treasury10Y[(order(as.Date(treasury10Y$Date))),]
row.names(treasury10Y) = NULL  # re-index the new subset
rates = treasury10Y[((nrow(treasury10Y))-((252*30)+1)):(nrow(treasury10Y)),] # take ~30 past years of treasury data, data takes a year to = 252 days per year and 30 years of past data from the latest observed value
rownames(rates) = NULL # re-index the new subset
# Plot time series for fun visualization
plot(rates$Value ~ as.Date(rates$Date), type="l", main = "U.S. Treasury 10 Year - Yield (%)", xlab = "Date" ,ylab = "Yield (%)")
set.seed(1000) # Set seed to ensure replicable results
# Parameters for sampling from standard normal distribution
n = length(rates$Value) # The sample size
sims = 1000 # The number of simulations to replicate, also the length of discrete values in our Lambda Distribution
mu = 0 # The true expected mean value of our normal distribution
s = 1 # The true variance of our normal distribution
# Generate random samples of size n
rs = matrix(rnorm(n*sims,mu,s), nrow=n, ncol=sims)
# Function to perform cascading ANOVA tests through each vector and return max F value
# rs: vector of float values
anova_tests = function(rs){
index_end = length(rs)
#vectors to hold test statistics
anovatest_stats = c()
#traverse through list and perform anova tests
for (i in 2:(index_end-2)){
#create factors for anova test
populations = factor(c(rep(c("a","b"), c(i,index_end-i))))
#perform anova test
anova_results = unlist(summary(aov(rs~populations)))
#put test statistic in list
anovatest_stats = c(anovatest_stats, anova_results[7])
}
#return max test statistic
return(max(anovatest_stats))
}
## Now run the function over every vector in the matrix ##
# Load the library "snow"" to parallelize the computation using all available cores of the local machine
library(snow)
# Open up sockets to the 4 local processor cores
## Note: only enter "localhost" = to the number of cores on your processor
cl = makeSOCKcluster(c("localhost","localhost","localhost","localhost"))
